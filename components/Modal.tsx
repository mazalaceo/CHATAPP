import { useState } from "react";
import { Input } from "./ui/input";
import { MessageCircleX, SendHorizontal } from "lucide-react";
import axios from "axios";
import { API_URL } from "@/constants";
import { useParams } from "next/navigation";



interface Response {
    question: string;
    answer: string;
}
export default function Modal({ roomId }: any) {
    const [showModal, setShowModal] = useState(false);
    const [question, setQuestion] = useState<string>("");  // State for the user's question
    const [responses, setResponses] = useState<Response[]>([]);  // State for storing all responses
    const [loading, setLoading] = useState(false);  // State for loading indicator
    const { id } = useParams()
    const askQuestion = async () => {
        if (!question.trim()) return;  // Prevent empty questions from being sent
        setLoading(true);

        try {
            console.log("Sending question to server:", question);

            const res = await axios.post(`${API_URL}/api/translate/${id}`, {
                question,
                roomId: id
            });

            console.log("Received response from server:", res.data);

            setResponses((prevResponses) => [
                ...prevResponses,
                { question, answer: res.data.summary },
            ]);

            setQuestion("");
        } catch (error) {
            console.error("Error asking question:", error);

            setResponses((prevResponses) => [
                ...prevResponses,
                { question, answer: "Failed to get a response from AI." },
            ]);
        } finally {
            setLoading(false);
        }
    };


    return (
        <>
            <button

                type="button"
                onClick={() => setShowModal(true)}
            >
                <img src="/images/logo.png" alt="ask-ai" className='size-12 cursor-pointer' />
            </button>
            {showModal ? (
                <>
                    <div className="fixed inset-0 z-10 flex flex-col justify-between  w-screen lg:w-[400px] h-full   bg-[#000D2D]  p-5 text-[14px]">
                        <div className="relative  overflow-y-auto scrollbar-hide ">
                            <div>
                                <svg width="250" height="68" viewBox="0 0 379 68" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M369.158 15.6855V56.5941H378.466V15.6855H369.158Z" fill="#2D9F89" />
                                    <path d="M127.741 14.9449L115.879 39.5031L112.216 48.2984H111.72L107.929 39.5031L95.9473 14.9449H86.8186V57.3505H93.5221V31.3387L93.2745 25.2026H93.7697L96.3318 31.3387L107.818 54.8394H115.892L127.378 31.3387L129.94 25.2026H130.435L130.187 31.3387V57.3505H136.87V14.9449H127.741Z" fill="white" />
                                    <path d="M343.767 18.9823C342.285 16.3102 338.996 14.5869 335.371 14.5869C331.747 14.5869 328.454 16.3276 326.976 18.9823L305.949 56.9925H315.341L321.383 45.982H321.406L331.896 26.929L334.961 20.9146H335.59L338.655 26.929L349.145 45.982L355.187 56.9925H364.757L343.767 18.9823Z" fill="#2D9F89" />
                                    <path d="M270.464 49.4864H262.572L258.585 56.602H292.486L272.517 19.0531C271.031 16.2418 269.303 14.9449 267.064 14.9449C264.828 14.9449 263.046 16.2505 261.483 19.0836L240.989 56.602H249.486L266.859 24.6803L275.045 40.3472C276.099 42.3232 277.288 44.5774 278.081 45.9441L280.378 49.9216L283.243 49.6084C281.651 49.4864 272.573 49.4864 270.464 49.4864Z" fill="white" />
                                    <path d="M170.577 15.7986V22.0915C176.704 23.8759 180.824 29.3594 180.824 36.427C180.824 45.0916 174.654 51.3803 166.153 51.3803C157.652 51.3803 151.482 45.0916 151.482 36.427C151.482 29.107 155.888 23.4798 162.383 21.9088V15.6855C151.849 17.274 144.543 25.5078 144.543 36.427C144.543 48.6125 153.63 57.447 166.153 57.447C178.677 57.447 187.763 48.608 187.763 36.427C187.746 25.7429 180.752 17.6265 170.577 15.7986Z" fill="white" />
                                    <path d="M225.182 16.0031V44.774L202.197 16.0031H196.471V56.8508H203.303V28.0711L226.288 56.8377H232.014V15.99L225.182 16.0031Z" fill="white" />
                                    <path d="M37.608 23.0356V30.3165C37.6057 32.6519 36.6946 34.8909 35.0742 36.5424C33.4541 38.1937 31.2571 39.1226 28.9658 39.1249C27.0133 39.1255 25.135 38.3633 23.7173 36.9952C22.2995 35.627 21.4502 33.7571 21.3441 31.77L21.0452 26.2125H22.5397C22.8834 26.2125 23.2129 26.0733 23.456 25.8255C23.6991 25.578 23.8355 25.242 23.8355 24.8916C23.8355 24.5415 23.6991 24.2054 23.456 23.9577C23.2129 23.7099 22.8834 23.5709 22.5397 23.5709H20.9001L20.8658 22.9311C20.7953 21.781 20.9561 20.6282 21.3387 19.5438C21.7213 18.4594 22.3175 17.4661 23.0905 16.6251C23.9444 15.7092 24.9934 15.0057 26.1565 14.5687C27.3196 14.1318 28.5656 13.9733 29.7984 14.1053C31.9535 14.3454 33.9446 15.3912 35.3872 17.0407C36.8296 18.6901 37.6208 20.8261 37.608 23.0356Z" fill="#2D9F89" />
                                    <path d="M51.8216 0.123444H0.105164V67.3222H66.0317V21.0826L51.8216 0.123444ZM18.6491 31.9233L18.1666 22.941C18.1666 22.7406 18.1666 22.536 18.1666 22.3317C18.1666 22.1271 18.1666 21.9356 18.1666 21.7397C17.0633 23.909 16.51 26.3253 16.5569 28.7683C16.5569 32.3847 17.5475 36.3667 19.0804 40.6011L19.1701 40.8406V43.887C19.6512 44.1967 20.0205 44.6574 20.2225 45.1997C20.4244 45.742 20.4481 46.3365 20.2898 46.8938C20.1316 47.4508 19.8001 47.9406 19.3451 48.2891C18.8902 48.6375 18.3365 48.8261 17.7674 48.8261C17.1983 48.8261 16.6446 48.6375 16.1897 48.2891C15.7348 47.9406 15.4032 47.4508 15.245 46.8938C15.0868 46.3365 15.1104 45.742 15.3123 45.1997C15.5143 44.6574 15.8836 44.1967 16.3648 43.887V41.3627C15.1479 37.9552 13.7046 33.5291 13.7046 28.89C13.6644 25.8807 14.3771 22.9106 15.7755 20.26C16.5532 18.8087 17.5041 17.4609 18.6064 16.2475C19.9136 12.532 22.4655 9.40602 25.8124 7.42027C29.1591 5.43454 33.0864 4.71649 36.9017 5.39272C40.717 6.06893 44.1759 8.09597 46.6685 11.1167C49.1613 14.1374 50.528 17.958 50.5278 21.9051V42.6857C51.009 42.9956 51.3782 43.4564 51.5804 43.9987C51.7823 44.5409 51.8059 45.1355 51.6475 45.6925C51.4894 46.2497 51.1579 46.7394 50.7029 47.088C50.248 47.4365 49.6942 47.6248 49.1252 47.6248C48.5561 47.6248 48.0024 47.4365 47.5474 47.088C47.0925 46.7394 46.7609 46.2497 46.6028 45.6925C46.4445 45.1355 46.4682 44.5409 46.6702 43.9987C46.8721 43.4564 47.2415 42.9956 47.7225 42.6857V21.9051C47.7208 19.0984 46.8856 16.358 45.327 14.0441C43.7683 11.7303 41.5591 9.95135 38.99 8.94129C36.4207 7.93122 33.6116 7.73729 30.9324 8.38498C28.2529 9.03266 25.8285 10.4916 23.9779 12.5701C25.5224 11.7477 27.2396 11.3205 28.9821 11.3254C31.9841 11.3323 34.8609 12.5511 36.9833 14.715C39.1055 16.8789 40.3003 19.8116 40.3058 22.8712V49.5401C40.7856 49.8498 41.1537 50.3099 41.3549 50.8513C41.5562 51.3926 41.5793 51.9858 41.4212 52.5418C41.2629 53.0978 40.9319 53.5863 40.4778 53.9342C40.0237 54.2818 39.4712 54.4697 38.9032 54.4697C38.3352 54.4697 37.7826 54.2818 37.3285 53.9342C36.8744 53.5863 36.5435 53.0978 36.3851 52.5418C36.227 51.9858 36.2504 51.3926 36.4515 50.8513C36.6526 50.3099 37.0207 49.8498 37.5005 49.5401V37.9074C36.5011 39.0819 35.278 40.0373 33.9056 40.7157C32.5331 41.3943 31.0396 41.7817 29.5158 41.8546V47.1814L28.4869 47.4685C28.1965 47.5513 21.5142 49.5748 18.0855 58.0482C18.4493 58.5128 18.6466 59.09 18.6449 59.6846C18.644 60.1877 18.5039 60.6804 18.2405 61.1058C17.9771 61.5313 17.6013 61.8724 17.1561 62.0899C16.711 62.3073 16.2147 62.3922 15.7243 62.3349C15.2339 62.2773 14.7693 62.0802 14.3841 61.7656C13.9988 61.4511 13.7086 61.032 13.5466 60.5568C13.3847 60.0815 13.3576 59.5693 13.4687 59.0791C13.5797 58.5888 13.8242 58.1405 14.1742 57.7857C14.5241 57.431 14.9652 57.184 15.4467 57.0734C18.6064 49.1309 24.3622 46.0412 26.7107 45.0836V41.6022C24.5168 41.1021 22.543 39.8867 21.088 38.14C19.6333 36.3933 18.777 34.2109 18.6491 31.9233ZM51.574 53.8311C51.5733 54.0603 51.5241 54.2866 51.4299 54.4948C51.3354 54.7027 51.1982 54.8877 51.0274 55.0366L43.8754 61.3339H31.4545C31.1194 61.8429 30.6326 62.2289 30.0663 62.4345C29.4997 62.6403 28.8833 62.6549 28.3079 62.4764C27.7326 62.298 27.2287 61.9358 26.8707 61.4433C26.5127 60.9507 26.3194 60.3541 26.3194 59.741C26.3194 59.1282 26.5127 58.5313 26.8707 58.039C27.2287 57.5464 27.7326 57.1843 28.3079 57.0058C28.8833 56.8274 29.4997 56.8419 30.0663 57.0477C30.6326 57.2534 31.1194 57.6393 31.4545 58.1483H42.7141L48.9865 52.6212C49.2682 52.3714 49.6291 52.2336 50.0026 52.234C50.2283 52.234 50.4512 52.2837 50.656 52.38C50.861 52.4761 51.0429 52.6164 51.1897 52.791C51.4377 53.0784 51.5746 53.4483 51.574 53.8311Z" fill="#2D9F89" />
                                    <path d="M51.8787 0H0V67.4164H66.1613V21.0374L51.8787 0ZM65.9265 67.1988H0.213493V0.22631H51.7677L65.9265 21.1159V67.1988Z" fill="#2D9F89" />
                                    <path d="M28.7821 26.197H32.4287C32.7683 26.197 33.0941 26.0596 33.3345 25.8146C33.5747 25.5698 33.7097 25.2378 33.7097 24.8914C33.7097 24.5453 33.5747 24.2132 33.3345 23.9682C33.0941 23.7234 32.7683 23.5858 32.4287 23.5858H26.1905V30.6186C26.1905 30.965 26.3253 31.297 26.5657 31.5418C26.8058 31.7866 27.1316 31.9242 27.4714 31.9242C27.811 31.9242 28.137 31.7866 28.3772 31.5418C28.6174 31.297 28.7523 30.965 28.7523 30.6186L28.7821 26.197Z" fill="#000D2D" stroke="black" stroke-width="0.154929" stroke-miterlimit="10" />
                                    <path d="M341.58 48.6531H313.33V56.974H346.187L341.58 48.6531Z" fill="#2D9F89" />
                                </svg>


                            </div>
                            <div className="my-5  relative flex justify-center flex-col ">
                                <div className="  overflow-y-scroll scrollbar-hide">
                                    <div className="text-white">
                                        {responses.map((res, index) => (
                                            <div key={index} className="p-3 mb-4 flex gap-2 flex-col">
                                                <p className="font-bold bg-[#252D40] p-2 rounded-xl self-end">Q: {res.question}</p>
                                                <p className="bg-[#252D40] p-2 rounded-xl ">Ai: {res.answer}</p>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>
                            <div className=" flex items-center  gap-2 w-full  " >
                                <Input
                                    type="text"
                                    name="text"
                                    className="text-[#9D9FA5] border flex-1     border-secondary-upperground bg-transparent  outline-none"
                                    value={question}
                                    onChange={(e) => setQuestion(e.target.value)}
                                    placeholder="Enter your message"
                                />
                                <button
                                    title="send-text"
                                    onClick={askQuestion}
                                    disabled={loading}
                                    className={`bg-secondary-upperground hover:bg-secondary-upperground/50 w-[60px] flex items-center justify-center h-[40px] rounded-lg ${loading && "animate-pulse"}`}

                                >
                                    <SendHorizontal color="white" />
                                </button>

                                <button
                                    className="bg-red-500 hover:bg-red-500/50 w-[60px] flex items-center justify-center h-[40px] rounded-lg"

                                    type="button"
                                    onClick={() => setShowModal(false)}
                                >
                                    <MessageCircleX color="white" />
                                </button>
                            </div>
                    </div>
                </>
            ) : null}
        </>
    );
}